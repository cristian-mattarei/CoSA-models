[GENERAL]
model_file: ../oh_fifo_generic-single.v[oh_fifo_generic],reset_beh.ets
assume_if_true: True
add_clock: True
abstract_clock: True
#clock_behaviors: DetClock(rd_clk, 1);DetClock(wr_clk, 1)

[DEFAULT]
bmc_length: 80
trace_prefix: trace
trace_vars_change: True
trace_all_vars: True
vcd: True
strategy: MULTI

[deadlocks]
description: "No deadlocks"
verification: simulation
expected: True
bmc_length: 30

[reset_done]
description: "Never reset done"
formula: !reset_done
verification: safety
expected: False

[filling_4_element]
description: "The write address is always below 4"
formula: reset_performed -> (wr_addr < dec2bv(4,wr_addr))
verification: safety
expected: False

[never_half_full]
description: "The signal half full is always false"
formula: reset_performed -> (prog_full = 0_1)
verification: safety
expected: False

[never_write_enable]
description: "The signal write enable is always false"
formula: reset_performed -> (wr_en = 0_1)
verification: safety
expected: False

[never_read_enable]
description: "The signal read enable is always false"
formula: reset_performed -> (rd_en = 0_1)
verification: safety
expected: False

[reset_initializes_values]
description: "After reset, memory should be empty"
formula: reset_done -> (empty = 1_1)
verification: safety
prove: True
expected: True

[never_read_value]
description: "After reset, memory will never read a value"
formula: (reset_performed & (rnd_package.value != zero(dout))) -> !(posedge(rd_clk) & (rd_en = 1_1) & (dout = rnd_package.value))
generators: rnd_package=Random(dout)
verification: safety
expected: False
prove: True

[never_full_and_empty]
description: "After reset, full and empty should never be high at the same time"
formula: reset_performed -> (!((full = 1_1) & (empty = 1_1)))
verification: safety
prove: True
expected: True

[never_full_and_progfull]
description: "After reset, full and prog_full should never be high at the same time"
formula: reset_performed -> (!((full = 1_1) & (prog_full = 1_1)))
verification: safety
expected: False

[never_empty_and_progfull]
description: "After reset, empty and prog_full should never be high at the same time"
formula: reset_performed -> (!((empty = 1_1) & (prog_full = 1_1)))
verification: safety
prove: True
expected: True

[full_implies_progfull]
description: "After reset, full implies prog_full"
formula: reset_performed -> ((full = 1_1) -> (prog_full = 1_1))
verification: safety
expected: True
prove: True
