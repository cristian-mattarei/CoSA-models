The 16x16 files are consistent with eachother and the rest are 8x8.

conv_1_2.json <-- Input file. This never changes
mapped_conv_1_2.json <-- Input to pnr. Not needed if using the already produced bitstream and state-map

4x4 files:
fabric4x4.json
fabric_yosys4x4.log
conv_1_2_4x4.bsa
state-map-4x4.txt
pnr_4x4.log


8x8 files:
fabric8x8.json
fabric_yosys8x8.log
conv_1_2_8x8.bsa
state-map8x8.txt
pnr8x8.log

16x16 files:
fabric16x16.json
fabric_yosys16x16.log
conv_1_2_16x16.bsa
state-map16x16.txt


mul_2_pe invariant:
self.out_BUS16_S1_T0 = 2*self.in_BUS16_S2_T0

Until we have an updated file...
Works with
coreir commit: d53a8c4f1a5a20b8ca9070ccafdde34dfab80f74
pycoreir commit: bfc40b1969349e5c140a8e13b64313f202f67068


For pointwise16x16. We could just load the configuration into the multiplication
PE and check the same invariant as for mul_2_pe. Or check equivalence against
pointwise.json

For the pointwise16x16.bsa, the interface is in state-map-pointwise16x16.txt
However, if we only look at the multiplication tile, we can graph the inputs and outputs of that tile to get the same invariant, with the following interface

input: in_BUS16_S3_T0
output: out_BUS16_S3_T0

Thus, invar: self.out_BUS16_S3_T0 = 2*in_BUS16_S3_T0

Note: the lines starting with "#" are comments and can be removed

If you're just loading the one PE, you would only load the bitstream lines matching
XXXX0036 XXXXXXXX  this is tile id 36 i.e. tile (4, 2)